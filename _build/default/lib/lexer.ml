# 2 "lib/lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s,k) -> Hashtbl.add h s k)
      ["if", IF; "else", ELSE;
       "while", WHILE; "loop", LOOP; "break", BREAK; "return", RETURN;
       "true", CONSTANT (Cbool true); "false", CONSTANT (Cbool false);
       "let", LET; "fn", FN; "mut", MUT;
       "struct", STRUCT; "where", WHERE;
       "i32", I32; "bool", BOOL;
      ];
    fun s ->
      try Hashtbl.find h s with Not_found -> IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

# 26 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\220\255\222\255\000\000\061\000\136\000\028\000\232\255\
    \233\255\234\255\235\255\236\255\237\255\238\255\239\255\002\000\
    \003\000\031\000\032\000\056\000\248\255\152\000\250\255\033\000\
    \252\255\194\000\002\000\255\255\228\255\223\255\002\000\224\255\
    \231\255\245\255\244\255\242\255\240\255\230\255\045\000\103\000\
    \227\255\013\001\054\000\054\000\042\000\052\000\077\000\095\000\
    \157\000\131\000\089\000\089\000\081\000\159\000\004\000\137\000\
    \097\000\095\000\097\000\107\000\168\000\117\000\225\255\210\000\
    \251\255\252\255\253\255\169\000\165\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\035\000\035\000\034\000\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\014\000\
    \012\000\026\000\009\000\008\000\255\255\006\000\255\255\004\000\
    \255\255\002\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\004\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\064\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\027\000\026\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\017\000\026\000\003\000\055\000\020\000\019\000\004\000\
    \014\000\013\000\022\000\024\000\009\000\023\000\010\000\021\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\008\000\007\000\016\000\018\000\015\000\036\000\
    \035\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\042\000\034\000\033\000\032\000\028\000\
    \039\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\012\000\006\000\011\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \037\000\040\000\043\000\044\000\045\000\046\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\029\000\047\000\048\000\049\000\050\000\030\000\
    \051\000\052\000\053\000\054\000\056\000\057\000\058\000\059\000\
    \060\000\061\000\062\000\070\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\066\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\068\000\000\000\000\000\000\000\
    \002\000\067\000\031\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
    \000\000\025\000\000\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \000\000\000\000\000\000\000\000\041\000\000\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\026\000\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\026\000\000\000\054\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\017\000\018\000\019\000\023\000\
    \038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \006\000\039\000\042\000\043\000\044\000\045\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\021\000\046\000\047\000\048\000\049\000\021\000\
    \050\000\051\000\052\000\053\000\055\000\056\000\057\000\058\000\
    \059\000\060\000\061\000\067\000\068\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\063\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\063\000\255\255\255\255\255\255\
    \000\000\063\000\030\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\025\000\255\255\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \255\255\255\255\255\255\255\255\041\000\255\255\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\063\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "lib/lexer.mll"
                                 ( newline lexbuf; token lexbuf )
# 213 "lib/lexer.ml"

  | 1 ->
# 34 "lib/lexer.mll"
                                 ( token lexbuf )
# 218 "lib/lexer.ml"

  | 2 ->
let
# 35 "lib/lexer.mll"
             id
# 224 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "lib/lexer.mll"
                                 ( id_or_keyword id )
# 228 "lib/lexer.ml"

  | 3 ->
# 36 "lib/lexer.mll"
                                 ( PLUS )
# 233 "lib/lexer.ml"

  | 4 ->
# 37 "lib/lexer.mll"
                                 ( MINUS )
# 238 "lib/lexer.ml"

  | 5 ->
# 38 "lib/lexer.mll"
                                 ( STAR )
# 243 "lib/lexer.ml"

  | 6 ->
# 39 "lib/lexer.mll"
                                 ( DIV )
# 248 "lib/lexer.ml"

  | 7 ->
# 40 "lib/lexer.mll"
                                 ( PERCENT )
# 253 "lib/lexer.ml"

  | 8 ->
# 41 "lib/lexer.mll"
                                 ( AMP )
# 258 "lib/lexer.ml"

  | 9 ->
# 42 "lib/lexer.mll"
                                 ( EQ )
# 263 "lib/lexer.ml"

  | 10 ->
# 43 "lib/lexer.mll"
                                 ( EQEQ )
# 268 "lib/lexer.ml"

  | 11 ->
# 44 "lib/lexer.mll"
                                 ( NEQ )
# 273 "lib/lexer.ml"

  | 12 ->
# 45 "lib/lexer.mll"
                                 ( LT )
# 278 "lib/lexer.ml"

  | 13 ->
# 46 "lib/lexer.mll"
                                 ( LE )
# 283 "lib/lexer.ml"

  | 14 ->
# 47 "lib/lexer.mll"
                                 ( GT )
# 288 "lib/lexer.ml"

  | 15 ->
# 48 "lib/lexer.mll"
                                 ( GE )
# 293 "lib/lexer.ml"

  | 16 ->
# 49 "lib/lexer.mll"
                                 ( LPAREN )
# 298 "lib/lexer.ml"

  | 17 ->
# 50 "lib/lexer.mll"
                                 ( RPAREN )
# 303 "lib/lexer.ml"

  | 18 ->
# 51 "lib/lexer.mll"
                                 ( LBRA )
# 308 "lib/lexer.ml"

  | 19 ->
# 52 "lib/lexer.mll"
                                 ( RBRA )
# 313 "lib/lexer.ml"

  | 20 ->
# 53 "lib/lexer.mll"
                                 ( DOT )
# 318 "lib/lexer.ml"

  | 21 ->
# 54 "lib/lexer.mll"
                                 ( COMMA )
# 323 "lib/lexer.ml"

  | 22 ->
# 55 "lib/lexer.mll"
                                 ( COLON )
# 328 "lib/lexer.ml"

  | 23 ->
# 56 "lib/lexer.mll"
                                 ( SEMICOLON )
# 333 "lib/lexer.ml"

  | 24 ->
# 57 "lib/lexer.mll"
                                 ( AMPAMP )
# 338 "lib/lexer.ml"

  | 25 ->
# 58 "lib/lexer.mll"
                                 ( BARBAR )
# 343 "lib/lexer.ml"

  | 26 ->
# 59 "lib/lexer.mll"
                                 ( NOT )
# 348 "lib/lexer.ml"

  | 27 ->
# 60 "lib/lexer.mll"
                                 ( ARROW )
# 353 "lib/lexer.ml"

  | 28 ->
let
# 61 "lib/lexer.mll"
                       s
# 359 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 61 "lib/lexer.mll"
                                 ( CONSTANT (Ci32 s) )
# 363 "lib/lexer.ml"

  | 29 ->
let
# 62 "lib/lexer.mll"
                 id
# 369 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 62 "lib/lexer.mll"
                                 ( LIFETIME id )
# 373 "lib/lexer.ml"

  | 30 ->
# 63 "lib/lexer.mll"
                                 ( DERIVECOPY )
# 378 "lib/lexer.ml"

  | 31 ->
# 64 "lib/lexer.mll"
                                 ( newline lexbuf; token lexbuf )
# 383 "lib/lexer.ml"

  | 32 ->
# 65 "lib/lexer.mll"
                                 ( comment lexbuf.lex_curr_p lexbuf; token lexbuf )
# 388 "lib/lexer.ml"

  | 33 ->
# 66 "lib/lexer.mll"
                                 ( EOF )
# 393 "lib/lexer.ml"

  | 34 ->
# 68 "lib/lexer.mll"
    ( Error.error (lexbuf.lex_start_p, lexbuf.lex_curr_p) "Integers should be suffixed with 'i32' in MiniRust." )
# 398 "lib/lexer.ml"

  | 35 ->
# 70 "lib/lexer.mll"
    ( Error.error (lexbuf.lex_start_p, lexbuf.lex_curr_p) "Lexing error." )
# 403 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment start lexbuf =
   __ocaml_lex_comment_rec start lexbuf 63
and __ocaml_lex_comment_rec start lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 73 "lib/lexer.mll"
         ( () )
# 415 "lib/lexer.ml"

  | 1 ->
# 74 "lib/lexer.mll"
         ( comment start lexbuf; comment start lexbuf )
# 420 "lib/lexer.ml"

  | 2 ->
# 75 "lib/lexer.mll"
         ( newline lexbuf; comment start lexbuf )
# 425 "lib/lexer.ml"

  | 3 ->
# 76 "lib/lexer.mll"
         ( Error.error (start, lexbuf.lex_start_p) "Unterminated comment." )
# 430 "lib/lexer.ml"

  | 4 ->
# 77 "lib/lexer.mll"
         ( comment start lexbuf )
# 435 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec start lexbuf __ocaml_lex_state

;;

